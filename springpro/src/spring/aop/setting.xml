<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">
	
	<bean id="target" class="spring.aop.entity.NewLecExam" p:kor="1" p:eng="1" p:math="1" p:com="1"/>
 	
 	<!-- point cut 설정 
 	AOP(Aspect Oriented Programming) : 주 로직(Primary Concern) 이외에 
 	부수적인 로직을 주 로직 앞 뒤로 넣어주는 것 (샌드위치 형태 -> 주 로직을 자유롭게 바꿔 줄 수 있음)
 	1) AOP로 사용할 클래스 Bean(Advice) 생성
 	2) point cut Bean(Advice를 사용할 메서드명)생성
 	3) 클래스와 point cut Bean을 서로 이어주는 Bean 생성
 	4) proxy List 안에 Value값으로 서로 이어주는 Bean 이름 넣기 -->
 	
 	<bean id="logAroundAdvice" class="spring.aop.advice.LogAroundAdvice"/>
 	<bean id="logBeforeAdvice" class="spring.aop.advice.LogBeforeAdvice"/>
 	<bean id="logAfterReturningAdvice" class="spring.aop.advice.LogAfterReturningAdvice"/>
 	<bean id="logAfterThrowingAdvice" class="spring.aop.advice.LogAfterThrowingAdvice"/>
 	
 	<!--
  	<bean id="classicPointCut" class="org.springframework.aop.support.NameMatchMethodPointcut">
 		<property name="mappedName" value="total"/>
 	</bean>
	-->
	<!-- before point cut -->
 	<!--
 	<bean id="classicAroundAdvisor" class="org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor">
 		<property name="advice" ref="logAroundAdvice"/>
 		<property name="pointcut" ref="classicPointCut"/>
 	</bean> -->


 	<!-- 
 	<bean id="classicBeforeAdvisor" class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
 		<property name="advice" ref="logBeforeAdvice"/>
 		<property name="mappedNames">
 			<list>
 				<value>total</value>
 				<value>avg</value>
 			</list>
 		</property>
 	</bean>  -->
 	
 	<!-- 패턴형식의 리스트 넣기(Regexp) -->
 	<bean id="classicBeforeAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
 		<property name="advice" ref="logBeforeAdvice"/>
 		<property name="patterns">
 			<list>
 				<value>.*to.*</value>
 			</list>
 		</property>
 	</bean>  
 	
 	<bean id="proxy" class ="org.springframework.aop.framework.ProxyFactoryBean">
 		<property name="target" ref="target"/>
 		<property name="interceptorNames">
 			<list>
 				<!-- AOP로 사용할 클래스 지정 -->
 				<!-- <value>classicAroundAdvisor</value> -->
 				<value>classicBeforeAdvisor</value>
 				<value>logAfterReturningAdvice</value>
 				<value>logAfterThrowingAdvice</value>
 			</list>
 		</property>
 	</bean>

</beans>
